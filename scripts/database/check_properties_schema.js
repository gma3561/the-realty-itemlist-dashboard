// properties ÌÖåÏù¥Î∏î Ïä§ÌÇ§Îßà ÌôïÏù∏
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

console.log('üîç Properties ÌÖåÏù¥Î∏î Ïä§ÌÇ§Îßà ÌôïÏù∏');
console.log('================================');

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkPropertiesSchema() {
  try {
    console.log('üìã ÌòÑÏû¨ properties ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏');
    console.log('--------------------------------------');
    
    // ÌÖåÏù¥Î∏î Ï†ïÎ≥¥ Ï°∞Ìöå
    const { data: columns, error: schemaError } = await supabase
      .rpc('get_table_columns', {
        table_name: 'properties'
      })
      .catch(async () => {
        // RPCÍ∞Ä ÏóÜÏúºÎ©¥ ÏßÅÏ†ë ÏøºÎ¶¨
        const { data, error } = await supabase
          .from('information_schema.columns')
          .select('column_name, data_type, is_nullable')
          .eq('table_name', 'properties')
          .eq('table_schema', 'public');
        
        if (error) throw error;
        return { data };
      });

    if (schemaError) {
      console.log('‚ùå Ïä§ÌÇ§Îßà Ï°∞Ìöå Ïã§Ìå®:', schemaError.message);
      return;
    }

    console.log('‚úÖ ÌòÑÏû¨ Ïª¨Îüº Î™©Î°ù:');
    if (columns) {
      columns.forEach(col => {
        console.log(`   - ${col.column_name} (${col.data_type}) ${col.is_nullable === 'YES' ? 'NULL ÌóàÏö©' : 'NOT NULL'}`);
      });
    }

    // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (Ï≤´ Î≤àÏß∏ Î†àÏΩîÎìú)
    console.log('\nüìù ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏');
    console.log('--------------------');
    
    const { data: sampleData, error: sampleError } = await supabase
      .from('properties')
      .select('*')
      .limit(1);

    if (sampleError) {
      console.log('‚ùå ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', sampleError.message);
    } else if (sampleData && sampleData.length > 0) {
      console.log('‚úÖ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞:');
      console.log(JSON.stringify(sampleData[0], null, 2));
    } else {
      console.log('üìÑ ÌÖåÏù¥Î∏îÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.');
    }

    // ÌïÑÏàò Ïª¨Îüº ÌôïÏù∏
    console.log('\nüîç ÌïÑÏàò Ïª¨Îüº Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏');
    console.log('------------------------------');
    
    const requiredColumns = [
      'id', 'title', 'address', 'price', 'sale_price', 'rental_price',
      'property_type_id', 'property_status_id', 'transaction_type_id',
      'area_pyeong', 'area_sqft', 'description', 'created_at', 'updated_at'
    ];

    const existingColumns = columns ? columns.map(col => col.column_name) : [];
    
    requiredColumns.forEach(col => {
      const exists = existingColumns.includes(col);
      console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${col} ${exists ? 'Ï°¥Ïû¨' : 'ÎàÑÎùΩ'}`);
    });

    // ÎàÑÎùΩÎêú Ïª¨ÎüºÏù¥ ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä ÏøºÎ¶¨ Ï†úÏïà
    const missingColumns = requiredColumns.filter(col => !existingColumns.includes(col));
    
    if (missingColumns.length > 0) {
      console.log('\nüîß ÎàÑÎùΩÎêú Ïª¨Îüº Ï∂îÍ∞Ä SQL');
      console.log('=====================');
      
      missingColumns.forEach(col => {
        let columnDef = '';
        switch (col) {
          case 'sale_price':
          case 'rental_price':
          case 'price':
            columnDef = 'DECIMAL(15,2)';
            break;
          case 'area_pyeong':
          case 'area_sqft':
            columnDef = 'DECIMAL(10,2)';
            break;
          case 'property_type_id':
          case 'property_status_id':
          case 'transaction_type_id':
            columnDef = 'UUID REFERENCES';
            break;
          case 'created_at':
          case 'updated_at':
            columnDef = 'TIMESTAMP DEFAULT NOW()';
            break;
          default:
            columnDef = 'TEXT';
        }
        
        console.log(`ALTER TABLE properties ADD COLUMN ${col} ${columnDef};`);
      });
    }

  } catch (error) {
    console.error('‚ùå Ïä§ÌÇ§Îßà ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error);
  }
}

checkPropertiesSchema();