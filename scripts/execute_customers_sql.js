// Customers ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
const fs = require('fs');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_SERVICE_ROLE_KEY);

async function executeSQL() {
  try {
    console.log('üèóÔ∏è Customers ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ï§ë...');
    
    // Îã®Í≥ÑÎ≥Ñ SQL Ïã§Ìñâ
    const steps = [
      {
        name: 'customers ÌÖåÏù¥Î∏î ÏÉùÏÑ±',
        sql: `CREATE TABLE IF NOT EXISTS public.customers (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    email VARCHAR(255),
    address TEXT,
    birth_date DATE,
    gender VARCHAR(10) CHECK (gender IN ('ÎÇ®ÏÑ±', 'Ïó¨ÏÑ±', 'Í∏∞ÌÉÄ')),
    notes TEXT,
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES public.users(id)
)`
      },
      {
        name: 'properties ÌÖåÏù¥Î∏îÏóê customer_id Ïª¨Îüº Ï∂îÍ∞Ä',
        sql: `ALTER TABLE public.properties ADD COLUMN IF NOT EXISTS customer_id UUID REFERENCES public.customers(id)`
      }
    ];
    
    for (const step of steps) {
      console.log(`Ïã§Ìñâ Ï§ë: ${step.name}`);
      const { error } = await supabase.rpc('exec_sql', { sql_query: step.sql });
      if (error) {
        console.log(`‚ö†Ô∏è ${step.name} Ïã§Ìå®:`, error.message);
      } else {
        console.log(`‚úÖ ${step.name} ÏÑ±Í≥µ`);
      }
    }
    
    // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
    console.log('ÎçîÎØ∏ Í≥†Í∞ù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ï§ë...');
    const { data: adminUser } = await supabase
      .from('users')
      .select('id')
      .eq('role', 'admin')
      .limit(1)
      .single();
    
    if (adminUser) {
      const dummyCustomers = [
        {
          name: 'ÍπÄÏ≤†Ïàò',
          phone: '010-1234-5678',
          email: 'kimcs@example.com',
          address: 'ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨ ÌÖåÌó§ÎûÄÎ°ú 123',
          notes: 'Î∂ÑÏñë Î¨∏Ïùò Í≥†Í∞ù',
          created_by: adminUser.id
        },
        {
          name: 'Ïù¥ÏòÅÌù¨',
          phone: '010-9876-5432',
          email: 'leeyh@example.com',
          address: 'ÏÑúÏö∏Ïãú ÏÑúÏ¥àÍµ¨ Î∞òÌè¨ÎåÄÎ°ú 456',
          notes: 'Ï†ÑÏÑ∏ Î¨∏Ïùò Í≥†Í∞ù',
          created_by: adminUser.id
        },
        {
          name: 'Î∞ïÎØºÏàò',
          phone: '010-5555-1234',
          email: 'parkms@example.com',
          address: 'Í≤ΩÍ∏∞ÎèÑ ÏÑ±ÎÇ®Ïãú Î∂ÑÎãπÍµ¨ Ï†ïÏûêÎ°ú 789',
          notes: 'Îß§Îß§ Î¨∏Ïùò Í≥†Í∞ù',
          created_by: adminUser.id
        }
      ];
      
      for (const customer of dummyCustomers) {
        const { error } = await supabase.from('customers').insert(customer);
        if (error && !error.message.includes('duplicate key')) {
          console.log(`‚ö†Ô∏è Í≥†Í∞ù ${customer.name} Ï∂îÍ∞Ä Ïã§Ìå®:`, error.message);
        }
      }
    }
    
    console.log('‚úÖ Customers ÌÖåÏù¥Î∏î ÏÑ§Ï†ï ÏôÑÎ£å!');
    
    // ÏÉùÏÑ±Îêú ÌÖåÏù¥Î∏î ÌôïÏù∏
    const { data, error } = await supabase.from('customers').select('*').limit(5);
    if (error) {
      console.log('‚ùå ÌÖåÏù¥Î∏î ÌôïÏù∏ Ïã§Ìå®:', error.message);
    } else {
      console.log(`‚úÖ Customers ÌÖåÏù¥Î∏î ÌôïÏù∏: ${data.length}Í∞ú Î†àÏΩîÎìú`);
      data.forEach(customer => {
        console.log(`  - ${customer.name} (${customer.phone})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error.message);
  }
}

executeSQL();